#include <LWiFi.h>
#include <HttpClient.h>

char ssid[] = "";  // your network SSID (name)
char pass[] = "";  // your network password
char deviceId[] = "<%= deviceId %>";
char deviceKey[] = "<%= deviceKey %>";
char server[] = "<%= host %>";

String content;
int status = WL_IDLE_STATUS;     // the Wifi radio's status
WiFiClient client;
WiFiClient c2;
String request;

void setup() {
  pinMode(LED_BUILTIN, OUTPUT);
  //Initialize serial and wait for port to open:
  Serial.begin(9600);
  while (!Serial) {
    ; // wait for serial port to connect. Needed for native USB port only
  }

  Serial.println("Booting....");

  // check for the presence of the shield:
  if (WiFi.status() == WL_NO_SHIELD) {
    Serial.println("WiFi shield not present");
    // don't continue:
    while (true);
  }

  String fv = WiFi.firmwareVersion();
  if (fv != "1.1.0") {
    Serial.println("Please upgrade the firmware");
  }

  // attempt to connect to Wifi network:
  while (status != WL_CONNECTED) {
    Serial.print("Attempting to connect to WPA SSID: ");
    Serial.println(ssid);
    // Connect to WPA/WPA2 network:
    status = WiFi.begin(ssid, pass);

    // wait 10 seconds for connection:
    //delay(10000);
  }

  // you're connected now, so print out the data:
  Serial.print("You're connected to the network");
  printCurrentNet();
  printWifiData();
  request += "GET /deviceId/";
  request += String(deviceId);
  request += "/deviceKey/";
  request += String(deviceKey);
  request += "/viewer HTTP/1.1\r\n";
  request += "Upgrade: websocket\r\n";
  request += "Connection: Upgrade\r\n";
  request += "Sec-WebSocket-Version: 13\r\n";
  request += "Sec-WebSocket-Key: L159VM0TWUzyDxwJEIEzjw==\r\n";
  request += "Host: ";
  request += String(server);
  request += "\r\nOrigin: null\r\n\r\n";
  connectWs();
}

int lastTime = 0;

void connectWs () {
    if (client.connect(server, 8000)) {
        Serial.println("connected to server");
        // Make a Websocket request:
        client.print(request);
        delay(10);
    }
}

void loop() {
  String wscmd="";
  int checkpoint = 0;
  while (client.available()) {
     if(lastTime == 0) {
        lastTime = millis();
      } else {
        int thisTime = millis();
        if(thisTime - lastTime > 10 * 1000) {
          String data = "<%= datachannelId %>,,123";
          upload_datapoint(data);
          // every 10s upload a datapoint.
          lastTime = millis();
        }
      }
  }
  while (!client.connected()) {
     Serial.println();
     Serial.println("disconnecting from server.");
     client.stop();
     delay(2000);
     connectWs();
  }
}

void printWifiData() {
  // print your WiFi shield's IP address:
  IPAddress ip = WiFi.localIP();
  Serial.print("IP Address: ");
  Serial.println(ip);
  Serial.println(ip);

  // print your MAC address:
  byte mac[6];
  WiFi.macAddress(mac);
  Serial.print("MAC address: ");
  Serial.print(mac[5], HEX);
  Serial.print(":");
  Serial.print(mac[4], HEX);
  Serial.print(":");
  Serial.print(mac[3], HEX);
  Serial.print(":");
  Serial.print(mac[2], HEX);
  Serial.print(":");
  Serial.print(mac[1], HEX);
  Serial.print(":");
  Serial.println(mac[0], HEX);

}

void printCurrentNet() {
  // print the SSID of the network you're attached to:
  Serial.print("SSID: ");
  Serial.println(WiFi.SSID());

  // print the MAC address of the router you're attached to:
  byte bssid[6];
  WiFi.BSSID(bssid);
  Serial.print("BSSID: ");
  Serial.print(bssid[5], HEX);
  Serial.print(":");
  Serial.print(bssid[4], HEX);
  Serial.print(":");
  Serial.print(bssid[3], HEX);
  Serial.print(":");
  Serial.print(bssid[2], HEX);
  Serial.print(":");
  Serial.print(bssid[1], HEX);
  Serial.print(":");
  Serial.println(bssid[0], HEX);

  // print the received signal strength:
  long rssi = WiFi.RSSI();
  Serial.print("signal strength (RSSI):");
  Serial.println(rssi);

  // print the encryption type:
  byte encryption = WiFi.encryptionType();
  Serial.print("Encryption Type:");
  Serial.println(encryption, HEX);
  Serial.println();
}

void upload_datapoint(String content) {
  Serial.println("calling connection");

  if (c2.connect(server, <%= port %>)) {
    int thislength = content.length();
    c2.print("POST /api/devices/");
    c2.print(deviceId);
    c2.println("/datapoints.csv HTTP/1.1");
    c2.print("Host: ");
    c2.print(server);
    c2.print(":");
    c2.println(<%= port %>);
    c2.println("Content-Type: text/csv");
    c2.print("deviceKey: ");
    c2.println(deviceKey);
    c2.print("Content-Length: ");
    c2.println(thislength);
    c2.println();
    c2.println(content);
    c2.println();
    while(!c2.available())
    {
      delay(10);
    }
  }

}